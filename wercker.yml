box:
  id: golang

build:
  # base-path: /gopath/src/github.com/wercker/wercker
  steps:
    - install-packages:
        checkpoint: pkgs
        packages: openssh-client pkg-config libsystemd-journal-dev

    - setup-go-workspace:
        package-dir: github.com/wercker/wercker

    - script:
        name: go vendor
        code: |
          go get -u github.com/kardianos/govendor
          govendor sync

    - script:
        name: go vet
        code: |
          for p in $(find -type d -not -path './vendor*' -not -path './.git*' -not -path './tests*' -not -path './Documentation*'); do
            echo "go vet for $p"
            go tool vet $(find "$p" -maxdepth 1 -name '*.go')
          done

    # - golint:
    #     exclude: vendor

    - script:
        name: go test
        code: govendor test +local

    - script:
        name: clear out the build binaries
        code: |
            rm -rf $GOPATH/pkg

    - script:
        name: gox
        code: |
            export CGO_ENABLED=0
            GOOS=linux GOARCH=amd64 go build \
            -ldflags="-X github.com/wercker/wercker/util.GitCommit=$WERCKER_GIT_COMMIT -X github.com/wercker/wercker/util.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/wercker/wercker/util.Compiled=$(date +%s)" \
              -o "$WERCKER_OUTPUT_DIR/latest/linux_amd64/sentcli"
            GOOS=linux GOARCH=386 go build \
            -ldflags="-X github.com/wercker/wercker/util.GitCommit=$WERCKER_GIT_COMMIT -X github.com/wercker/wercker/util.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/wercker/wercker/util.Compiled=$(date +%s)" \
              -o "$WERCKER_OUTPUT_DIR/latest/linux_386/sentcli"
            GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-X github.com/wercker/wercker/util.GitCommit=$WERCKER_GIT_COMMIT -X github.com/wercker/wercker/util.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/wercker/wercker/util.Compiled=$(date +%s)" \
              -o "$WERCKER_OUTPUT_DIR/latest/darwin_amd64/sentcli"

            cp -r $WERCKER_OUTPUT_DIR/latest/* $WERCKER_REPORT_ARTIFACTS_DIR

    # generate SHA's for all binaries
    - script:
        name: generate SHAs
        code: |
            cd $WERCKER_OUTPUT_DIR
            for f in $(find . -type f -name sentcli); do
            cd $WERCKER_OUTPUT_DIR/$(dirname "$f")
            sha256sum sentcli > SHA256SUMS
            done
            cd $WERCKER_OUTPUT_DIR

    - script:
        name: prepare
        code: |
            echo $WERCKER_GIT_COMMIT > $WERCKER_OUTPUT_DIR/HEAD
            cp -r $WERCKER_OUTPUT_DIR/latest $WERCKER_OUTPUT_DIR/$WERCKER_GIT_COMMIT

deploy:
  box: ubuntu:12.04
  steps:
    - s3sync:
        source-dir: "."
        delete-removed: false
        bucket-url: $AWS_BUCKET_URL/$WERCKER_GIT_BRANCH/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

  # This should be auto deployed when a commit is made to "master".
  beta:
    - script:
        name: version
        code: |
            export WERCKER_VERSION=$(./latest/linux_amd64/sentcli --version | awk '{print $3}')
            echo $WERCKER_VERSION
            ./latest/linux_amd64/sentcli version --json > ./latest/version.json

    - script:
        name: rename
        code: |
            find . -type f -name "sentcli" -exec bash -c 'mv "${0}" ${0/%sentcli/wercker}' {} \;
            find . -type f -name SHA256SUMS -exec sed -i 's/sentcli/wercker/g' {} +

    - s3sync:
        source-dir: "./latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/beta/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

    - s3sync:
        source-dir: "./latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/dev/$WERCKER_VERSION/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

  # This should be manually deployed when we want to make new version available.
  stable:
    - script:
        name: version
        code: |
            export WERCKER_VERSION=$(./latest/linux_amd64/sentcli --version | awk '{print $3}')
            echo $WERCKER_VERSION
            ./latest/linux_amd64/sentcli version --json > ./latest/version.json

    - script:
        name: rename
        code: |
            find . -type f -name "sentcli" -exec bash -c 'mv "${0}" ${0/%sentcli/wercker}' {} \;
            find . -type f -name SHA256SUMS -exec sed -i 's/sentcli/wercker/g' {} +

    - s3sync:
        source-dir: "./latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/stable/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

    - s3sync:
        source-dir: "./latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/versions/$WERCKER_VERSION/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

run-tests:
    box:
      id: tcnksm/gox:1.5.1
      volumes: $CODE_PATH /var/run/docker.sock
    steps:
        - script:
            code: |
                unset WERCKER_BUILD_ID
                cd $CODE_PATH
                ./test-all.sh

